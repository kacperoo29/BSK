/* tslint:disable */
/* eslint-disable */
/**
 * DES.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Input64
 */
export interface Input64 {
    /**
     * 
     * @type {number}
     * @memberof Input64
     */
    'input'?: number;
    /**
     * 
     * @type {number}
     * @memberof Input64
     */
    'key'?: number;
}
/**
 * 
 * @export
 * @interface OutputFile
 */
export interface OutputFile {
    /**
     * 
     * @type {string}
     * @memberof OutputFile
     */
    'fileName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OutputFile
     */
    'data'?: string | null;
}

/**
 * DESApi - axios parameter creator
 * @export
 */
export const DESApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDecryptFilePost: async (files?: Array<any>, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/decryptFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('Files', element as any);
                })
            }

    
            if (key !== undefined) { 
                localVarFormParams.append('Key', key as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Input64} [input64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEncodePost: async (input64?: Input64, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/encode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(input64, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEncryptFilePost: async (files?: Array<any>, key?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/encryptFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('Files', element as any);
                })
            }

    
            if (key !== undefined) { 
                localVarFormParams.append('Key', key as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetKeyGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/getKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [seed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSetSeedPut: async (seed?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setSeed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [taps] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSetTapsPut: async (taps?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/setTaps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taps !== undefined) {
                localVarQueryParameter['taps'] = taps;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DESApi - functional programming interface
 * @export
 */
export const DESApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DESApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDecryptFilePost(files?: Array<any>, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutputFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDecryptFilePost(files, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Input64} [input64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEncodePost(input64?: Input64, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEncodePost(input64, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEncryptFilePost(files?: Array<any>, key?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutputFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEncryptFilePost(files, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGetKeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGetKeyGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [seed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSetSeedPut(seed?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSetSeedPut(seed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [taps] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSetTapsPut(taps?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSetTapsPut(taps, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DESApi - factory interface
 * @export
 */
export const DESApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DESApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDecryptFilePost(files?: Array<any>, key?: number, options?: any): AxiosPromise<Array<OutputFile>> {
            return localVarFp.apiDecryptFilePost(files, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Input64} [input64] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEncodePost(input64?: Input64, options?: any): AxiosPromise<number> {
            return localVarFp.apiEncodePost(input64, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<any>} [files] 
         * @param {number} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEncryptFilePost(files?: Array<any>, key?: number, options?: any): AxiosPromise<Array<OutputFile>> {
            return localVarFp.apiEncryptFilePost(files, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGetKeyGet(options?: any): AxiosPromise<number> {
            return localVarFp.apiGetKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [seed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSetSeedPut(seed?: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiSetSeedPut(seed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [taps] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSetTapsPut(taps?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSetTapsPut(taps, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DESApi - object-oriented interface
 * @export
 * @class DESApi
 * @extends {BaseAPI}
 */
export class DESApi extends BaseAPI {
    /**
     * 
     * @param {Array<any>} [files] 
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiDecryptFilePost(files?: Array<any>, key?: number, options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiDecryptFilePost(files, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Input64} [input64] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiEncodePost(input64?: Input64, options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiEncodePost(input64, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<any>} [files] 
     * @param {number} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiEncryptFilePost(files?: Array<any>, key?: number, options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiEncryptFilePost(files, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiGetKeyGet(options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiGetKeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [seed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiSetSeedPut(seed?: number, options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiSetSeedPut(seed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [taps] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DESApi
     */
    public apiSetTapsPut(taps?: string, options?: AxiosRequestConfig) {
        return DESApiFp(this.configuration).apiSetTapsPut(taps, options).then((request) => request(this.axios, this.basePath));
    }
}


